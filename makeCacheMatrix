## Put comments here that give an overall description of what your
## functions do
## Taking the inverse of matrix is time-monsuming conputation.This ##function allow to cache the value of the inverse to avoid ##recompute. 

## Write a short comment describing this function
## First function creates a specail "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {

  m<- NULL
  set <- function(y) {
    x<<- y
    m <<-NULL
    
  }
  get<- function() x
  setmean <- function(solve) m <<- solve
  getmean <- function() m
  list(set = set, get = get,
       setmean = setmean,
       getmean = getmean)
}


## Write a short comment describing this function
## The following function check if the inverse has been calculated,if so,it gets the value from the cache and skip computation.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        cacheSolve <- function(x, ...){
  m<-(x$getmean())
  if(!is.null(m)){
    message("getting cached data")
    return(m)
    
  }
  
  data <-x$get()

  m<- solve(data, ...)
  x$setmean(m)
  m
}

